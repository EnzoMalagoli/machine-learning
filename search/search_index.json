{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#entregas-de-machine-learning","title":"Entregas de Machine Learning","text":"<p>Me chamo Enzo Malagoli, e esse pages tem como objetivo ser um template para todas entregas feitas na disciplina de Machine Learning do 4\u00ba semestre de Sistemas de Informa\u00e7\u00e3o na ESPM/SP.</p> <p>Info</p> <ul> <li>Autor: Enzo De Marchi Malagoli</li> <li>Disciplina: Machine Learning</li> <li>Professor: Humberto Sandmann</li> </ul> <p> </p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Exerc\u00edcio 1 - Data 29/08/2025</li> <li> Exerc\u00edcio 2</li> <li> Exerc\u00edcio 3</li> <li> Exerc\u00edcio 4</li> <li> Projeto</li> </ul>"},{"location":"KMEANS/main/","title":"K-Means","text":"<p>Algoritmo K-Means</p> <p>O algoritmo K-Means \u00e9 uma t\u00e9cnica de aprendizado n\u00e3o supervisionado usada para agrupar dados em k clusters distintos. Ele funciona localizando os centros (centroides) de cada grupo e atribuindo os pontos ao cluster cujo centro esteja mais pr\u00f3ximo, geralmente usando a dist\u00e2ncia euclidiana. O processo \u00e9 iterativo: os pontos s\u00e3o realocados conforme os centroides s\u00e3o recalculados, at\u00e9 que os grupos fiquem est\u00e1veis.</p> <p>Cars Purchase Decision</p> <p>Este projeto tem como objetivo aplicar t\u00e9cnicas de Machine Learning para compreender os fatores que influenciam a decis\u00e3o de compra de autom\u00f3veis. A partir de um conjunto de dados com informa\u00e7\u00f5es sobre idade, g\u00eanero e sal\u00e1rio anual dos clientes, foi constru\u00edda uma \u00e1rvore de decis\u00e3o capaz de classificar se um indiv\u00edduo provavelmente realizar\u00e1 a compra ou n\u00e3o.</p>"},{"location":"KMEANS/main/#exploracao-dos-dados","title":"Explora\u00e7\u00e3o dos Dados","text":"<p>Estat\u00edsticas Descritivas</p> <p>Para o projeto foi utilizado o dataset Cars - Purchase Decision Dataset e cont\u00e9m detalhes de clientes que consideraram comprar um autom\u00f3vel, juntamente com seus sal\u00e1rios.</p> <p>O conjunto de dados cont\u00e9m 1000 registros e 5 vari\u00e1veis. A vari\u00e1vel alvo \u00e9 Purchased (0 = n\u00e3o comprou, 1 = comprou). Entre as vari\u00e1veis explicativas, temos Gender (categ\u00f3rica), Age (num\u00e9rica) e AnnualSalary (num\u00e9rica).</p> <p>Vari\u00e1veis</p> <ul> <li> <p>User ID: C\u00f3digo do Cliente</p> </li> <li> <p>Gender: G\u00eanero do Cliente</p> </li> <li> <p>Age: Idade do Cliente em anos</p> </li> <li> <p>AnnualSalary: Sal\u00e1rio anual do Cliente</p> </li> <li> <p>Purchased: Se o cliente realizou a compra</p> </li> </ul> <p>Estat\u00edsticas Descritivas e Visualiza\u00e7\u00f5es</p> <p>O gr\u00e1fico mostra a rela\u00e7\u00e3o entre idade e sal\u00e1rio dos clientes, destacando quem realizou a compra e quem n\u00e3o comprou:</p> ResultCode 2025-09-23T13:40:09.523998 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- ETAPA 2: Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- ETAPA 3: Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n\ndf0 = df[df[\"Purchased\"] == 0]\ndf1 = df[df[\"Purchased\"] == 1]\n\n# --- PLOT: Dispers\u00e3o Idade x Sal\u00e1rio ---\nfig, ax = plt.subplots(1, 1, figsize=(7, 5))\n\nax.scatter(\n    df0[\"Age\"], df0[\"AnnualSalary\"],\n    label=\"N\u00e3o comprou (0)\", alpha=0.4,\n    color=\"lightcoral\", edgecolor=\"darkred\", linewidth=0.8\n)\nax.scatter(\n    df1[\"Age\"], df1[\"AnnualSalary\"],\n    label=\"Comprou (1)\", alpha=0.4,\n    color=\"skyblue\", edgecolor=\"navy\", linewidth=0.8\n)\n\nax.set_title(\"Idade x Sal\u00e1rio por Decis\u00e3o de Compra\")\nax.set_xlabel(\"Idade\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.grid(linestyle=\"--\", alpha=0.6)\nax.legend()\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>A visualiza\u00e7\u00e3o deixa claro que idade e sal\u00e1rio exercem influ\u00eancia relevante no comportamento de compra</p> <p>O pr\u00f3ximo gr\u00e1fico apresenta a distribui\u00e7\u00e3o de clientes por g\u00eanero:</p> ResultCode 2025-09-23T13:40:09.742353 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning \ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n\n\ncounts = df[\"Gender\"].value_counts()\n\n# --- PLOT: Distribui\u00e7\u00e3o por G\u00eanero ---\nfig, ax = plt.subplots(1, 1, figsize=(6, 4))\n\nax.bar(\n    counts.index, counts.values,\n    color=[\"pink\", \"skyblue\"], edgecolor=\"lightcoral\"\n)\n\nax.set_title(\"Distribui\u00e7\u00e3o por G\u00eanero\")\nax.set_xlabel(\"G\u00eanero\")\nax.set_ylabel(\"Quantidade\")\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>Observa-se que h\u00e1 uma leve predomin\u00e2ncia de mulheres no dataset.</p> <p>O \u00faltimo gr\u00e1fico apresenta a distribui\u00e7\u00e3o do sal\u00e1rio anual dos clientes, permitindo visualizar a mediana, a dispers\u00e3o dos valores e a presen\u00e7a de poss\u00edveis extremos:</p> ResultCode 2025-09-23T13:40:09.853662 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- PLOT: Boxplot\nfig, ax = plt.subplots(figsize=(7, 5))\n\nbp = ax.boxplot(df[\"AnnualSalary\"], patch_artist=True, widths=0.5)\n\nfor box in bp[\"boxes\"]:\n    box.set(facecolor=\"skyblue\", edgecolor=\"navy\", linewidth=1.2)\nfor whisker in bp[\"whiskers\"]:\n    whisker.set(color=\"navy\", linewidth=1.2)\nfor cap in bp[\"caps\"]:\n    cap.set(color=\"navy\", linewidth=1.2)\nfor median in bp[\"medians\"]:\n    median.set(color=\"darkred\", linewidth=1.5)\n\nax.set_title(\"Distribui\u00e7\u00e3o do Sal\u00e1rio Anual\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.set_xticks([])\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>O gr\u00e1fico evidencia que a maior parte dos sal\u00e1rios est\u00e1 concentrada em uma faixa intermedi\u00e1ria, entre aproximadamente 50 mil e 90 mil, com a mediana em torno de 70 mil.</p>"},{"location":"KMEANS/main/#pre-processamento","title":"Pr\u00e9-processamento","text":"<p>Pr\u00e9-processamento de dados brutos deve ser a primeira etapa ao lidar com datasets de todos tamanhos.</p> <p>Data Cleaning</p> <p>O processo de data cleaning garante que o conjunto utilizado seja confi\u00e1vel e esteja livre de falhas que possam distorcer os resultados. Consiste em identificar e corrigir problemas como valores ausentes, dados inconsistentes ou informa\u00e7\u00f5es que n\u00e3o fazem sentido. Essa limpeza permite que a base seja mais fiel \u00e0 realidade e forne\u00e7a condi\u00e7\u00f5es adequadas para a constru\u00e7\u00e3o de modelos de Machine Learning.</p> <p>No c\u00f3digo, a limpeza foi feita dessa forma: poss\u00edveis valores vazios em idade, g\u00eanero e sal\u00e1rio foram preenchidos com informa\u00e7\u00f5es representativas, como a mediana ou o valor mais frequente.</p> ResultCode Gender Age AnnualSalary Male 59 135500 Female 53 90500 Male 41 73500 Male 32 77500 Female 46 135500 Female 41 67500 Female 47 42500 Female 36 63000 Male 25 59500 Male 55 39000 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    features = ['Gender', 'Age', 'AnnualSalary']\n    return df[features]\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.sample(n=10).to_markdown(index=False))\n</code></pre> <p>Encoding Categorical Variables</p> <p>O processo de encoding de vari\u00e1veis categ\u00f3ricas transforma informa\u00e7\u00f5es em formato de texto em valores num\u00e9ricos, permitindo que algoritmos de Machine Learning consigam utiliz\u00e1-las em seus c\u00e1lculos.</p> <p>No c\u00f3digo, o encoding foi aplicado \u00e0 vari\u00e1vel g\u00eanero, convertendo as categorias \u201cMale\u201d e \u201cFemale\u201d em valores num\u00e9ricos (1 e 0). Dessa forma, a base de dados mant\u00e9m todas as colunas originais, mas agora com a vari\u00e1vel categ\u00f3rica representada de maneira adequada para ser usada em algoritmos de classifica\u00e7\u00e3o.</p> ResultCode User ID Gender Age AnnualSalary Purchased 176 1 41 73500 0 448 1 59 135500 1 391 1 25 59500 0 623 0 47 42500 1 773 0 46 135500 0 413 0 53 90500 1 793 1 55 39000 1 836 0 36 63000 0 586 0 41 67500 0 651 1 32 77500 0 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    # Limpeza\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    # Encoding simples para Gender\n    df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})\n\n\n    return df\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.to_markdown(index=False))\n</code></pre> <p>Normaliza\u00e7\u00e3o</p> <p>A normaliza\u00e7\u00e3o \u00e9 o processo de reescalar os valores num\u00e9ricos de forma que fiquem dentro de um intervalo fixo, normalmente entre 0 e 1. Isso facilita a compara\u00e7\u00e3o entre vari\u00e1veis que possuem unidades ou magnitudes diferentes, evitando que atributos com valores muito altos dominem a an\u00e1lise.</p> <p>No c\u00f3digo, a normaliza\u00e7\u00e3o foi aplicada \u00e0s colunas idade e sal\u00e1rio anual, transformando seus valores para a faixa de 0 a 1 por meio do m\u00e9todo Min-Max Scaling. Dessa forma, ambas as vari\u00e1veis passam a estar na mesma escala, tornando o conjunto de dados mais consistente e adequado para a modelagem.</p> ResultCode User ID Gender Age AnnualSalary Purchased 709 Female 0.511111 0.327273 0 897 Male 0.422222 0.938182 1 501 Female 0.866667 0.778182 1 760 Female 0.4 0.0836364 0 877 Male 0.666667 0.429091 1 28 Female 0.844444 0.647273 1 703 Female 0.488889 0.327273 0 288 Female 0.333333 0.752727 0 594 Male 0.711111 0.221818 0 176 Male 0.511111 0.425455 0 <pre><code>import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# Selecionar colunas num\u00e9ricas para normalizar\nfeatures_to_normalize = ['Age', 'AnnualSalary']\n\n# Inicializar o scaler\nscaler = MinMaxScaler()\n\n# Aplicar normaliza\u00e7\u00e3o e substituir no DataFrame\ndf[features_to_normalize] = scaler.fit_transform(df[features_to_normalize])\n\n# Mostrar amostra dos dados normalizados\nprint(df.sample(10).to_markdown(index=False))\n</code></pre>"},{"location":"KMEANS/main/#divisao-dos-dados","title":"Divis\u00e3o dos Dados","text":"<p>Ap\u00f3s o pr\u00e9-processamento, o conjunto de dados precisa ser separado em duas partes: uma para treinamento e outra para teste. Essa divis\u00e3o \u00e9 fundamental para que o modelo de Machine Learning aprenda padr\u00f5es a partir de um grupo de exemplos e, depois, seja avaliado em dados que ainda n\u00e3o foram vistos. Dessa forma, \u00e9 poss\u00edvel medir a capacidade de generaliza\u00e7\u00e3o do modelo e evitar que ele apenas memorize os exemplos fornecidos.</p> <p>No c\u00f3digo, os atributos escolhidos como preditores foram g\u00eanero, idade e sal\u00e1rio anual, enquanto a vari\u00e1vel-alvo foi Purchased, que indica se o cliente comprou ou n\u00e3o o produto. A divis\u00e3o foi feita em 70% para treino e 30% para teste, garantindo que a propor\u00e7\u00e3o de clientes que compraram e n\u00e3o compraram fosse preservada em ambos os subconjuntos.</p> ResultCode <p>Tamanho treino: 700 Tamanho teste: 300</p> <pre><code>import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n# --- Separar vari\u00e1veis preditoras \nX = df[[\"Gender\", \"Age\", \"AnnualSalary\"]]\ny = df[\"Purchased\"]\n\n# --- Divis\u00e3o em treino e teste \nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\nprint(\"Tamanho treino:\", X_train.shape[0])\nprint(\"Tamanho teste:\", X_test.shape[0])\n</code></pre>"},{"location":"KMEANS/main/#implementacao-k-means","title":"Implementa\u00e7\u00e3o K-Means","text":"<p>O processo de clustering foi conduzido utilizando Idade e Sal\u00e1rio Anual como vari\u00e1veis principais, resultando em clusters bem definidos e centr\u00f3ides que representam os perfis m\u00e9dios de cada grupo.</p> <p>Os resultados evidenciaram que a renda anual foi um fator decisivo na forma\u00e7\u00e3o dos clusters, separando clientes em faixas de poder aquisitivo distintas. Essa segmenta\u00e7\u00e3o pode ser \u00fatil para estrat\u00e9gias de marketing, defini\u00e7\u00e3o de p\u00fablico-alvo e personaliza\u00e7\u00e3o de ofertas.</p> ResultCode 2025-09-23T13:40:11.372946 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import StringIO\nfrom sklearn.cluster import KMeans\n\nplt.figure(figsize=(12, 10))\n\n\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n\nX = df[[\"Age\", \"AnnualSalary\"]].dropna().to_numpy()\n\n\nkmeans = KMeans(n_clusters=2, init=\"k-means++\", max_iter=100, random_state=42, n_init=10)\nlabels = kmeans.fit_predict(X)\n\n\nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap=\"viridis\", s=50, alpha=0.7)\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],\n            c=\"red\", marker=\"*\", s=200, label=\"Centroides\")\n\nplt.title(\"Clusters com K-Means\")\nplt.xlabel(\"Idade\")\nplt.ylabel(\"Sal\u00e1rio Anual\")\nplt.legend()\n\n\nbuffer = StringIO()\nplt.savefig(buffer, format=\"svg\", transparent=True)\nprint(buffer.getvalue())\n</code></pre> <p>O gr\u00e1fico mostra os clusters formados pelo K-Means, com cada cor representando um grupo de clientes e as estrelas vermelhas indicando os centr\u00f3ides. \u00c9 poss\u00edvel notar que o Sal\u00e1rio Anual foi a vari\u00e1vel mais determinante na separa\u00e7\u00e3o dos grupos, criando um cluster associado a clientes com maior poder aquisitivo e outro relacionado a clientes de renda mais baixa. Assim, o modelo demonstra como o K-Means pode ser usado de forma eficaz para segmenta\u00e7\u00e3o de mercado e an\u00e1lise de perfis de consumidores.</p> <p>Apesar dos bons resultados, \u00e9 importante destacar que o K-Means depende fortemente da escolha do n\u00famero de clusters (K) e pode ser influenciado por outliers.</p>"},{"location":"KNN/main/","title":"K-Nearest Neighbors","text":"<p>Algoritmo KNN</p> <p>O algoritmo K-Nearest Neighbors (KNN) \u00e9 uma t\u00e9cnica de aprendizado supervisionado usada para classifica\u00e7\u00e3o e regress\u00e3o. Ele funciona comparando uma nova amostra com as mais pr\u00f3ximas no conjunto de treino, de acordo com uma medida de dist\u00e2ncia, geralmente a euclidiana. Na etapa de classifica\u00e7\u00e3o, a classe atribu\u00edda \u00e9 definida pela maioria entre os k vizinhos mais pr\u00f3ximos.</p> <p>Cars Purchase Decision</p> <p>Este projeto tem como objetivo aplicar t\u00e9cnicas de Machine Learning para compreender os fatores que influenciam a decis\u00e3o de compra de autom\u00f3veis. A partir de um conjunto de dados com informa\u00e7\u00f5es sobre idade, g\u00eanero e sal\u00e1rio anual dos clientes, foi constru\u00edda uma \u00e1rvore de decis\u00e3o capaz de classificar se um indiv\u00edduo provavelmente realizar\u00e1 a compra ou n\u00e3o.</p>"},{"location":"KNN/main/#exploracao-dos-dados","title":"Explora\u00e7\u00e3o dos Dados","text":"<p>Estat\u00edsticas Descritivas</p> <p>Para o projeto foi utilizado o dataset Cars - Purchase Decision Dataset e cont\u00e9m detalhes de clientes que consideraram comprar um autom\u00f3vel, juntamente com seus sal\u00e1rios.</p> <p>O conjunto de dados cont\u00e9m 1000 registros e 5 vari\u00e1veis. A vari\u00e1vel alvo \u00e9 Purchased (0 = n\u00e3o comprou, 1 = comprou). Entre as vari\u00e1veis explicativas, temos Gender (categ\u00f3rica), Age (num\u00e9rica) e AnnualSalary (num\u00e9rica).</p> <p>Vari\u00e1veis</p> <ul> <li> <p>User ID: C\u00f3digo do Cliente</p> </li> <li> <p>Gender: G\u00eanero do Cliente</p> </li> <li> <p>Age: Idade do Cliente em anos</p> </li> <li> <p>AnnualSalary: Sal\u00e1rio anual do Cliente</p> </li> <li> <p>Purchased: Se o cliente realizou a compra</p> </li> </ul> <p>Estat\u00edsticas Descritivas e Visualiza\u00e7\u00f5es</p> <p>O gr\u00e1fico mostra a rela\u00e7\u00e3o entre idade e sal\u00e1rio dos clientes, destacando quem realizou a compra e quem n\u00e3o comprou:</p> ResultCode 2025-09-23T13:40:11.677500 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- ETAPA 2: Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- ETAPA 3: Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n\ndf0 = df[df[\"Purchased\"] == 0]\ndf1 = df[df[\"Purchased\"] == 1]\n\n# --- PLOT: Dispers\u00e3o Idade x Sal\u00e1rio ---\nfig, ax = plt.subplots(1, 1, figsize=(7, 5))\n\nax.scatter(\n    df0[\"Age\"], df0[\"AnnualSalary\"],\n    label=\"N\u00e3o comprou (0)\", alpha=0.4,\n    color=\"lightcoral\", edgecolor=\"darkred\", linewidth=0.8\n)\nax.scatter(\n    df1[\"Age\"], df1[\"AnnualSalary\"],\n    label=\"Comprou (1)\", alpha=0.4,\n    color=\"skyblue\", edgecolor=\"navy\", linewidth=0.8\n)\n\nax.set_title(\"Idade x Sal\u00e1rio por Decis\u00e3o de Compra\")\nax.set_xlabel(\"Idade\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.grid(linestyle=\"--\", alpha=0.6)\nax.legend()\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>A visualiza\u00e7\u00e3o deixa claro que idade e sal\u00e1rio exercem influ\u00eancia relevante no comportamento de compra</p> <p>O pr\u00f3ximo gr\u00e1fico apresenta a distribui\u00e7\u00e3o de clientes por g\u00eanero:</p> ResultCode 2025-09-23T13:40:11.864576 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning \ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n\n\ncounts = df[\"Gender\"].value_counts()\n\n# --- PLOT: Distribui\u00e7\u00e3o por G\u00eanero ---\nfig, ax = plt.subplots(1, 1, figsize=(6, 4))\n\nax.bar(\n    counts.index, counts.values,\n    color=[\"pink\", \"skyblue\"], edgecolor=\"lightcoral\"\n)\n\nax.set_title(\"Distribui\u00e7\u00e3o por G\u00eanero\")\nax.set_xlabel(\"G\u00eanero\")\nax.set_ylabel(\"Quantidade\")\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>Observa-se que h\u00e1 uma leve predomin\u00e2ncia de mulheres no dataset.</p> <p>O \u00faltimo gr\u00e1fico apresenta a distribui\u00e7\u00e3o do sal\u00e1rio anual dos clientes, permitindo visualizar a mediana, a dispers\u00e3o dos valores e a presen\u00e7a de poss\u00edveis extremos:</p> ResultCode 2025-09-23T13:40:11.983302 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- PLOT: Boxplot\nfig, ax = plt.subplots(figsize=(7, 5))\n\nbp = ax.boxplot(df[\"AnnualSalary\"], patch_artist=True, widths=0.5)\n\nfor box in bp[\"boxes\"]:\n    box.set(facecolor=\"skyblue\", edgecolor=\"navy\", linewidth=1.2)\nfor whisker in bp[\"whiskers\"]:\n    whisker.set(color=\"navy\", linewidth=1.2)\nfor cap in bp[\"caps\"]:\n    cap.set(color=\"navy\", linewidth=1.2)\nfor median in bp[\"medians\"]:\n    median.set(color=\"darkred\", linewidth=1.5)\n\nax.set_title(\"Distribui\u00e7\u00e3o do Sal\u00e1rio Anual\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.set_xticks([])\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>O gr\u00e1fico evidencia que a maior parte dos sal\u00e1rios est\u00e1 concentrada em uma faixa intermedi\u00e1ria, entre aproximadamente 50 mil e 90 mil, com a mediana em torno de 70 mil.</p>"},{"location":"KNN/main/#pre-processamento","title":"Pr\u00e9-processamento","text":"<p>Pr\u00e9-processamento de dados brutos deve ser a primeira etapa ao lidar com datasets de todos tamanhos.</p> <p>Data Cleaning</p> <p>O processo de data cleaning garante que o conjunto utilizado seja confi\u00e1vel e esteja livre de falhas que possam distorcer os resultados. Consiste em identificar e corrigir problemas como valores ausentes, dados inconsistentes ou informa\u00e7\u00f5es que n\u00e3o fazem sentido. Essa limpeza permite que a base seja mais fiel \u00e0 realidade e forne\u00e7a condi\u00e7\u00f5es adequadas para a constru\u00e7\u00e3o de modelos de Machine Learning.</p> <p>No c\u00f3digo, a limpeza foi feita dessa forma: poss\u00edveis valores vazios em idade, g\u00eanero e sal\u00e1rio foram preenchidos com informa\u00e7\u00f5es representativas, como a mediana ou o valor mais frequente.</p> ResultCode Gender Age AnnualSalary Female 47 42500 Female 41 67500 Female 53 90500 Male 59 135500 Male 55 39000 Male 32 77500 Male 25 59500 Male 41 73500 Female 46 135500 Female 36 63000 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    features = ['Gender', 'Age', 'AnnualSalary']\n    return df[features]\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.sample(n=10).to_markdown(index=False))\n</code></pre> <p>Encoding Categorical Variables</p> <p>O processo de encoding de vari\u00e1veis categ\u00f3ricas transforma informa\u00e7\u00f5es em formato de texto em valores num\u00e9ricos, permitindo que algoritmos de Machine Learning consigam utiliz\u00e1-las em seus c\u00e1lculos.</p> <p>No c\u00f3digo, o encoding foi aplicado \u00e0 vari\u00e1vel g\u00eanero, convertendo as categorias \u201cMale\u201d e \u201cFemale\u201d em valores num\u00e9ricos (1 e 0). Dessa forma, a base de dados mant\u00e9m todas as colunas originais, mas agora com a vari\u00e1vel categ\u00f3rica representada de maneira adequada para ser usada em algoritmos de classifica\u00e7\u00e3o.</p> ResultCode User ID Gender Age AnnualSalary Purchased 176 1 41 73500 0 448 1 59 135500 1 391 1 25 59500 0 623 0 47 42500 1 773 0 46 135500 0 413 0 53 90500 1 793 1 55 39000 1 836 0 36 63000 0 586 0 41 67500 0 651 1 32 77500 0 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    # Limpeza\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    # Encoding simples para Gender\n    df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})\n\n\n    return df\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.to_markdown(index=False))\n</code></pre> <p>Normaliza\u00e7\u00e3o</p> <p>A normaliza\u00e7\u00e3o \u00e9 o processo de reescalar os valores num\u00e9ricos de forma que fiquem dentro de um intervalo fixo, normalmente entre 0 e 1. Isso facilita a compara\u00e7\u00e3o entre vari\u00e1veis que possuem unidades ou magnitudes diferentes, evitando que atributos com valores muito altos dominem a an\u00e1lise.</p> <p>No c\u00f3digo, a normaliza\u00e7\u00e3o foi aplicada \u00e0s colunas idade e sal\u00e1rio anual, transformando seus valores para a faixa de 0 a 1 por meio do m\u00e9todo Min-Max Scaling. Dessa forma, ambas as vari\u00e1veis passam a estar na mesma escala, tornando o conjunto de dados mais consistente e adequado para a modelagem.</p> ResultCode User ID Gender Age AnnualSalary Purchased 970 Female 0.355556 0.403636 0 203 Female 0.911111 0.530909 1 673 Male 0.444444 0.483636 0 973 Female 1 0.694545 1 678 Male 0.644444 0.0363636 1 980 Male 0.2 0.0363636 0 63 Female 0.822222 0.912727 1 28 Female 0.844444 0.647273 1 130 Female 0.444444 0.978182 1 102 Male 0.288889 0.0109091 0 <pre><code>import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# Selecionar colunas num\u00e9ricas para normalizar\nfeatures_to_normalize = ['Age', 'AnnualSalary']\n\n# Inicializar o scaler\nscaler = MinMaxScaler()\n\n# Aplicar normaliza\u00e7\u00e3o e substituir no DataFrame\ndf[features_to_normalize] = scaler.fit_transform(df[features_to_normalize])\n\n# Mostrar amostra dos dados normalizados\nprint(df.sample(10).to_markdown(index=False))\n</code></pre>"},{"location":"KNN/main/#divisao-dos-dados","title":"Divis\u00e3o dos Dados","text":"<p>Ap\u00f3s o pr\u00e9-processamento, o conjunto de dados precisa ser separado em duas partes: uma para treinamento e outra para teste. Essa divis\u00e3o \u00e9 fundamental para que o modelo de Machine Learning aprenda padr\u00f5es a partir de um grupo de exemplos e, depois, seja avaliado em dados que ainda n\u00e3o foram vistos. Dessa forma, \u00e9 poss\u00edvel medir a capacidade de generaliza\u00e7\u00e3o do modelo e evitar que ele apenas memorize os exemplos fornecidos.</p> <p>No c\u00f3digo, os atributos escolhidos como preditores foram g\u00eanero, idade e sal\u00e1rio anual, enquanto a vari\u00e1vel-alvo foi Purchased, que indica se o cliente comprou ou n\u00e3o o produto. A divis\u00e3o foi feita em 70% para treino e 30% para teste, garantindo que a propor\u00e7\u00e3o de clientes que compraram e n\u00e3o compraram fosse preservada em ambos os subconjuntos.</p> ResultCode <p>Tamanho treino: 700 Tamanho teste: 300</p> <pre><code>import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n# --- Separar vari\u00e1veis preditoras \nX = df[[\"Gender\", \"Age\", \"AnnualSalary\"]]\ny = df[\"Purchased\"]\n\n# --- Divis\u00e3o em treino e teste \nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\nprint(\"Tamanho treino:\", X_train.shape[0])\nprint(\"Tamanho teste:\", X_test.shape[0])\n</code></pre>"},{"location":"KNN/main/#implementacao-knn","title":"Implementa\u00e7\u00e3o KNN","text":""},{"location":"KNN/main/#from-scratch","title":"From Scratch","text":"ResultCode <p>Accuracy: 0.91</p> <pre><code>import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nclass KNNClassifier:\n    def __init__(self, k=3):\n        self.k = k\n\n    def fit(self, X, y):\n        self.X_train = X\n        self.y_train = y\n\n    def predict(self, X):\n        return np.array([self._predict(x) for x in X])\n\n    def _predict(self, x):\n        # Dist\u00e2ncia Euclidiana\n        distances = np.sqrt(((self.X_train - x) ** 2).sum(axis=1))\n        # k vizinhos mais pr\u00f3ximos\n        k_idx = np.argsort(distances)[:self.k]\n        k_labels = self.y_train[k_idx]\n        # Classe mais comum\n        vals, counts = np.unique(k_labels, return_counts=True)\n        return vals[np.argmax(counts)]\n\n\ndef preprocess(df):\n    # 1) Data cleaning\n    df[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\n    df[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n    df[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n    # 2) Encoding (Gender -&gt; 0/1)\n    df[\"Gender\"] = df[\"Gender\"].map({\"Female\": 0, \"Male\": 1})\n\n\n    for col in [\"Age\", \"AnnualSalary\"]:\n        cmin, cmax = df[col].min(), df[col].max()\n        df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n\n    X = df[[\"Gender\", \"Age\", \"AnnualSalary\"]].to_numpy(dtype=float)\n    y = df[\"Purchased\"].to_numpy(dtype=int)\n    return X, y\n\n\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\nX, y = preprocess(df)\n\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.30, random_state=42, stratify=y\n)\n\nknn = KNNClassifier(k=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\n\nacc = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {acc:.2f}\")\n</code></pre>"},{"location":"KNN/main/#usando-scikit-learn","title":"Usando Scikit-Learn","text":"ResultCodeGr\u00e1fico <p>Accuracy: 0.91</p> <pre><code>import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n#  PREPROCESS \ndef preprocess(df):\n\n    df[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\n    df[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n    df[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n\n    enc = LabelEncoder()\n    df[\"Gender\"] = enc.fit_transform(df[\"Gender\"])\n\n\n    for col in [\"Age\", \"AnnualSalary\"]:\n        cmin, cmax = df[col].min(), df[col].max()\n        df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n    X = df[[\"Gender\", \"Age\", \"AnnualSalary\"]].to_numpy(dtype=float)\n    y = df[\"Purchased\"].to_numpy(dtype=int)\n    return X, y\n\n#  LOAD DATA \nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\nX, y = preprocess(df)\n\n#  SPLIT \nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\n# TRAIN KNN \nknn = KNeighborsClassifier(n_neighbors=5, metric=\"minkowski\", p=2)  # k=5, dist\u00e2ncia Euclidiana\nknn.fit(X_train, y_train)\n\n# PREDICT &amp; EVALUATE\ny_pred = knn.predict(X_test)\n\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n</code></pre> <p>Accuracy: 0.90  2025-09-23T13:40:12.412429 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ </p> <p>A etapa de classifica\u00e7\u00e3o foi conduzida utilizando o algoritmo K-Nearest Neighbors (KNN) em duas abordagens distintas. Primeiramente, foi implementado um classificador do zero, no qual as etapas de pr\u00e9-processamento (limpeza, encoding e normaliza\u00e7\u00e3o) foram aplicadas antes da divis\u00e3o em treino e teste. Esse modelo segue a l\u00f3gica central do KNN: calcular dist\u00e2ncias entre os pontos, selecionar os vizinhos mais pr\u00f3ximos e atribuir a classe mais frequente. Apesar de simples, essa vers\u00e3o manual ajudou a compreender os mecanismos internos do algoritmo.</p> <p>Em seguida, a mesma tarefa foi realizada com o KNeighborsClassifier da biblioteca Scikit-Learn, que oferece uma implementa\u00e7\u00e3o mais robusta e otimizada. A acur\u00e1cia obtida em ambas as vers\u00f5es foi semelhante, demonstrando que o pr\u00e9-processamento foi eficaz e que o modelo conseguiu identificar padr\u00f5es relevantes nos dados. Al\u00e9m disso, a visualiza\u00e7\u00e3o da fronteira de decis\u00e3o mostrou de forma clara como o KNN separa os clientes que compraram dos que n\u00e3o compraram, destacando sua capacidade de criar limites n\u00e3o lineares adaptados \u00e0 distribui\u00e7\u00e3o real das vari\u00e1veis de idade e sal\u00e1rio.</p>"},{"location":"arvoredecisao/main/","title":"\u00c1rvore de Decis\u00e3o","text":"<p>Projeto \u00c1rvore de Decis\u00e3o</p> <p>Cars Purchase Decision</p> <p>Este projeto tem como objetivo aplicar t\u00e9cnicas de Machine Learning para compreender os fatores que influenciam a decis\u00e3o de compra de autom\u00f3veis. A partir de um conjunto de dados com informa\u00e7\u00f5es sobre idade, g\u00eanero e sal\u00e1rio anual dos clientes, foi constru\u00edda uma \u00e1rvore de decis\u00e3o capaz de classificar se um indiv\u00edduo provavelmente realizar\u00e1 a compra ou n\u00e3o.</p>"},{"location":"arvoredecisao/main/#exploracao-dos-dados","title":"Explora\u00e7\u00e3o dos Dados","text":"<p>Estat\u00edsticas Descritivas</p> <p>Para o projeto foi utilizado o dataset Cars - Purchase Decision Dataset e cont\u00e9m detalhes de clientes que consideraram comprar um autom\u00f3vel, juntamente com seus sal\u00e1rios.</p> <p>O conjunto de dados cont\u00e9m 1000 registros e 5 vari\u00e1veis. A vari\u00e1vel alvo \u00e9 Purchased (0 = n\u00e3o comprou, 1 = comprou). Entre as vari\u00e1veis explicativas, temos Gender (categ\u00f3rica), Age (num\u00e9rica) e AnnualSalary (num\u00e9rica).</p> <p>Vari\u00e1veis</p> <ul> <li> <p>User ID: C\u00f3digo do Cliente</p> </li> <li> <p>Gender: G\u00eanero do Cliente</p> </li> <li> <p>Age: Idade do Cliente em anos</p> </li> <li> <p>AnnualSalary: Sal\u00e1rio anual do Cliente</p> </li> <li> <p>Purchased: Se o cliente realizou a compra</p> </li> </ul> <p>Estat\u00edsticas Descritivas e Visualiza\u00e7\u00f5es</p> <p>O gr\u00e1fico mostra a rela\u00e7\u00e3o entre idade e sal\u00e1rio dos clientes, destacando quem realizou a compra e quem n\u00e3o comprou:</p> ResultCode 2025-09-23T13:40:12.766448 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- ETAPA 2: Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- ETAPA 3: Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n\ndf0 = df[df[\"Purchased\"] == 0]\ndf1 = df[df[\"Purchased\"] == 1]\n\n# --- PLOT: Dispers\u00e3o Idade x Sal\u00e1rio ---\nfig, ax = plt.subplots(1, 1, figsize=(7, 5))\n\nax.scatter(\n    df0[\"Age\"], df0[\"AnnualSalary\"],\n    label=\"N\u00e3o comprou (0)\", alpha=0.4,\n    color=\"lightcoral\", edgecolor=\"darkred\", linewidth=0.8\n)\nax.scatter(\n    df1[\"Age\"], df1[\"AnnualSalary\"],\n    label=\"Comprou (1)\", alpha=0.4,\n    color=\"skyblue\", edgecolor=\"navy\", linewidth=0.8\n)\n\nax.set_title(\"Idade x Sal\u00e1rio por Decis\u00e3o de Compra\")\nax.set_xlabel(\"Idade\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.grid(linestyle=\"--\", alpha=0.6)\nax.legend()\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>A visualiza\u00e7\u00e3o deixa claro que idade e sal\u00e1rio exercem influ\u00eancia relevante no comportamento de compra</p> <p>O pr\u00f3ximo gr\u00e1fico apresenta a distribui\u00e7\u00e3o de clientes por g\u00eanero:</p> ResultCode 2025-09-23T13:40:12.951640 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning \ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n\n\ncounts = df[\"Gender\"].value_counts()\n\n# --- PLOT: Distribui\u00e7\u00e3o por G\u00eanero ---\nfig, ax = plt.subplots(1, 1, figsize=(6, 4))\n\nax.bar(\n    counts.index, counts.values,\n    color=[\"pink\", \"skyblue\"], edgecolor=\"lightcoral\"\n)\n\nax.set_title(\"Distribui\u00e7\u00e3o por G\u00eanero\")\nax.set_xlabel(\"G\u00eanero\")\nax.set_ylabel(\"Quantidade\")\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>Observa-se que h\u00e1 uma leve predomin\u00e2ncia de mulheres no dataset.</p> <p>O \u00faltimo gr\u00e1fico apresenta a distribui\u00e7\u00e3o do sal\u00e1rio anual dos clientes, permitindo visualizar a mediana, a dispers\u00e3o dos valores e a presen\u00e7a de poss\u00edveis extremos:</p> ResultCode 2025-09-23T13:40:13.064219 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- PLOT: Boxplot\nfig, ax = plt.subplots(figsize=(7, 5))\n\nbp = ax.boxplot(df[\"AnnualSalary\"], patch_artist=True, widths=0.5)\n\nfor box in bp[\"boxes\"]:\n    box.set(facecolor=\"skyblue\", edgecolor=\"navy\", linewidth=1.2)\nfor whisker in bp[\"whiskers\"]:\n    whisker.set(color=\"navy\", linewidth=1.2)\nfor cap in bp[\"caps\"]:\n    cap.set(color=\"navy\", linewidth=1.2)\nfor median in bp[\"medians\"]:\n    median.set(color=\"darkred\", linewidth=1.5)\n\nax.set_title(\"Distribui\u00e7\u00e3o do Sal\u00e1rio Anual\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.set_xticks([])\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>O gr\u00e1fico evidencia que a maior parte dos sal\u00e1rios est\u00e1 concentrada em uma faixa intermedi\u00e1ria, entre aproximadamente 50 mil e 90 mil, com a mediana em torno de 70 mil.</p>"},{"location":"arvoredecisao/main/#pre-processamento","title":"Pr\u00e9-processamento","text":"<p>Pr\u00e9-processamento de dados brutos deve ser a primeira etapa ao lidar com datasets de todos tamanhos.</p> <p>Data Cleaning</p> <p>O processo de data cleaning garante que o conjunto utilizado seja confi\u00e1vel e esteja livre de falhas que possam distorcer os resultados. Consiste em identificar e corrigir problemas como valores ausentes, dados inconsistentes ou informa\u00e7\u00f5es que n\u00e3o fazem sentido. Essa limpeza permite que a base seja mais fiel \u00e0 realidade e forne\u00e7a condi\u00e7\u00f5es adequadas para a constru\u00e7\u00e3o de modelos de Machine Learning.</p> <p>No c\u00f3digo, a limpeza foi feita dessa forma: poss\u00edveis valores vazios em idade, g\u00eanero e sal\u00e1rio foram preenchidos com informa\u00e7\u00f5es representativas, como a mediana ou o valor mais frequente.</p> ResultCode Gender Age AnnualSalary Female 46 135500 Male 41 73500 Female 47 42500 Male 32 77500 Female 36 63000 Male 59 135500 Male 55 39000 Female 53 90500 Male 25 59500 Female 41 67500 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    features = ['Gender', 'Age', 'AnnualSalary']\n    return df[features]\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.sample(n=10).to_markdown(index=False))\n</code></pre> <p>Encoding Categorical Variables</p> <p>O processo de encoding de vari\u00e1veis categ\u00f3ricas transforma informa\u00e7\u00f5es em formato de texto em valores num\u00e9ricos, permitindo que algoritmos de Machine Learning consigam utiliz\u00e1-las em seus c\u00e1lculos.</p> <p>No c\u00f3digo, o encoding foi aplicado \u00e0 vari\u00e1vel g\u00eanero, convertendo as categorias \u201cMale\u201d e \u201cFemale\u201d em valores num\u00e9ricos (1 e 0). Dessa forma, a base de dados mant\u00e9m todas as colunas originais, mas agora com a vari\u00e1vel categ\u00f3rica representada de maneira adequada para ser usada em algoritmos de classifica\u00e7\u00e3o.</p> ResultCode User ID Gender Age AnnualSalary Purchased 176 1 41 73500 0 448 1 59 135500 1 391 1 25 59500 0 623 0 47 42500 1 773 0 46 135500 0 413 0 53 90500 1 793 1 55 39000 1 836 0 36 63000 0 586 0 41 67500 0 651 1 32 77500 0 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    # Limpeza\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    # Encoding simples para Gender\n    df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})\n\n\n    return df\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.to_markdown(index=False))\n</code></pre> <p>Normaliza\u00e7\u00e3o</p> <p>A normaliza\u00e7\u00e3o \u00e9 o processo de reescalar os valores num\u00e9ricos de forma que fiquem dentro de um intervalo fixo, normalmente entre 0 e 1. Isso facilita a compara\u00e7\u00e3o entre vari\u00e1veis que possuem unidades ou magnitudes diferentes, evitando que atributos com valores muito altos dominem a an\u00e1lise.</p> <p>No c\u00f3digo, a normaliza\u00e7\u00e3o foi aplicada \u00e0s colunas idade e sal\u00e1rio anual, transformando seus valores para a faixa de 0 a 1 por meio do m\u00e9todo Min-Max Scaling. Dessa forma, ambas as vari\u00e1veis passam a estar na mesma escala, tornando o conjunto de dados mais consistente e adequado para a modelagem.</p> ResultCode User ID Gender Age AnnualSalary Purchased 933 Female 0.488889 0.436364 0 69 Male 0.644444 0.0727273 1 794 Female 0.288889 0 0 142 Male 0.0888889 0.541818 0 594 Male 0.711111 0.221818 0 846 Female 0.644444 0.134545 1 45 Male 0.266667 0.0145455 0 883 Female 0.622222 0.189091 1 554 Female 0.8 0.941818 1 982 Male 0.511111 0.243636 0 <pre><code>import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# Selecionar colunas num\u00e9ricas para normalizar\nfeatures_to_normalize = ['Age', 'AnnualSalary']\n\n# Inicializar o scaler\nscaler = MinMaxScaler()\n\n# Aplicar normaliza\u00e7\u00e3o e substituir no DataFrame\ndf[features_to_normalize] = scaler.fit_transform(df[features_to_normalize])\n\n# Mostrar amostra dos dados normalizados\nprint(df.sample(10).to_markdown(index=False))\n</code></pre>"},{"location":"arvoredecisao/main/#divisao-dos-dados","title":"Divis\u00e3o dos Dados","text":"<p>Ap\u00f3s o pr\u00e9-processamento, o conjunto de dados precisa ser separado em duas partes: uma para treinamento e outra para teste. Essa divis\u00e3o \u00e9 fundamental para que o modelo de Machine Learning aprenda padr\u00f5es a partir de um grupo de exemplos e, depois, seja avaliado em dados que ainda n\u00e3o foram vistos. Dessa forma, \u00e9 poss\u00edvel medir a capacidade de generaliza\u00e7\u00e3o do modelo e evitar que ele apenas memorize os exemplos fornecidos.</p> <p>No c\u00f3digo, os atributos escolhidos como preditores foram g\u00eanero, idade e sal\u00e1rio anual, enquanto a vari\u00e1vel-alvo foi Purchased, que indica se o cliente comprou ou n\u00e3o o produto. A divis\u00e3o foi feita em 70% para treino e 30% para teste, garantindo que a propor\u00e7\u00e3o de clientes que compraram e n\u00e3o compraram fosse preservada em ambos os subconjuntos.</p> ResultCode <p>Tamanho treino: 700 Tamanho teste: 300</p> <pre><code>import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n# --- Separar vari\u00e1veis preditoras \nX = df[[\"Gender\", \"Age\", \"AnnualSalary\"]]\ny = df[\"Purchased\"]\n\n# --- Divis\u00e3o em treino e teste \nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\nprint(\"Tamanho treino:\", X_train.shape[0])\nprint(\"Tamanho teste:\", X_test.shape[0])\n</code></pre>"},{"location":"arvoredecisao/main/#treinamento-e-avaliacao-do-modelo","title":"Treinamento e Avalia\u00e7\u00e3o do Modelo","text":"<p>Por fim, esta \u00e9 a \u00e1rvore de decis\u00e3o final:</p> Decision TreeDatasetCode <p>Accuracy: 0.9033  2025-09-23T13:40:13.532794 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ </p> Gender Age AnnualSalary Purchased Male 41 73500 0 Male 59 135500 1 Male 25 59500 0 Female 47 42500 1 Female 46 135500 0 Female 53 90500 1 Male 55 39000 1 Female 36 63000 0 Female 41 67500 0 Male 32 77500 0 <pre><code>import matplotlib\nmatplotlib.use(\"Agg\") \nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom io import BytesIO\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\n\n# PREPROCESS \ndef preprocess(df):\n\n    # Data cleaning\n    df[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\n    df[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n    df[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n    # Encoding\n    enc = LabelEncoder()\n    df[\"Gender\"] = enc.fit_transform(df[\"Gender\"])  # Female=0, Male=1\n\n    # Normaliza\u00e7\u00e3o Min\u2013Max\n    for col in [\"Age\", \"AnnualSalary\"]:\n        cmin, cmax = df[col].min(), df[col].max()\n        df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n    # Features finais\n    features = [\"Gender\", \"Age\", \"AnnualSalary\"]\n    return df[features]\n\n# CARREGAR DADOS \nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# X (features) / y (target)\nX = preprocess(df)\ny = df[\"Purchased\"]\n\n# TRAIN / TEST SPLIT \nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\n# DECISION TREE\nclf = tree.DecisionTreeClassifier(max_depth=4, random_state=42) \nclf.fit(X_train, y_train)\n\n# AVALIA\u00c7\u00c3O \ny_pred = clf.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {acc:.4f}\")\n\n#  PLOTAR \u00c1RVORE \nplt.figure(figsize=(14, 10))\ntree.plot_tree(\n    clf,\n    feature_names=X.columns.tolist(),\n    class_names=[\"N\u00e3o comprou (0)\", \"Comprou (1)\"],\n    filled=True, rounded=True, fontsize=9\n)\n\nbuf = BytesIO()\nplt.savefig(buf, format=\"svg\", bbox_inches=\"tight\", transparent=True)\nbuf.seek(0)\nprint(buf.getvalue().decode(\"utf-8\"))\nplt.close()\n</code></pre> <p>O modelo de \u00e1rvore de decis\u00e3o foi treinado com as vari\u00e1veis idade, g\u00eanero e sal\u00e1rio anual, atingindo uma acur\u00e1cia de aproximadamente 90%. A an\u00e1lise da \u00e1rvore mostra que idade e sal\u00e1rio foram os principais fatores utilizados para separar compradores e n\u00e3o compradores, enquanto o g\u00eanero teve impacto secund\u00e1rio.</p>"},{"location":"arvoredecisao/main/#conclusao","title":"Conclus\u00e3o","text":"<p>O projeto teve in\u00edcio com a explora\u00e7\u00e3o do dataset, etapa em que foi poss\u00edvel identificar padr\u00f5es relevantes, como uma leve predomin\u00e2ncia do p\u00fablico feminino e a influ\u00eancia direta de idade e renda no comportamento de compra. Durante essa fase, tamb\u00e9m foi necess\u00e1rio lidar com valores ausentes e normalizar vari\u00e1veis para tornar o conjunto adequado \u00e0 modelagem.</p> <p>Ap\u00f3s o pr\u00e9-processamento, o modelo de \u00e1rvore de decis\u00e3o foi treinado e alcan\u00e7ou uma acur\u00e1cia em torno de 90%, indicando boa capacidade de identificar corretamente os clientes com maior ou menor propens\u00e3o \u00e0 compra. A an\u00e1lise da \u00e1rvore revelou que idade e sal\u00e1rio anual s\u00e3o os fatores que mais impactam as previs\u00f5es, enquanto o g\u00eanero aparece em pontos espec\u00edficos, mas com menor import\u00e2ncia.</p> <p>Em linhas gerais, o trabalho atendeu ao objetivo de desenvolver um prot\u00f3tipo preditivo baseado em dados demogr\u00e1ficos e socioecon\u00f4micos. O modelo se mostrou eficiente e, com ajustes adicionais, tem potencial para ser expandido em aplica\u00e7\u00f5es mais completas no apoio a decis\u00f5es de mercado.</p>"},{"location":"metricas/main/","title":"M\u00e9tricas","text":"<p>Metrics and Evaluation - Algoritmo KNN e K-Means</p> <p>Os algoritmos K-Nearest Neighbors (KNN) e K-Means s\u00e3o duas abordagens cl\u00e1ssicas de Machine Learning que, embora diferentes em sua natureza, compartilham a ideia central de medir a proximidade entre pontos. O KNN \u00e9 um m\u00e9todo supervisionado, utilizado para tarefas de classifica\u00e7\u00e3o, em que novas amostras s\u00e3o atribu\u00eddas \u00e0 classe predominante entre seus vizinhos mais pr\u00f3ximos. J\u00e1 o K-Means \u00e9 um m\u00e9todo n\u00e3o supervisionado, aplicado para agrupar dados em clusters com base na semelhan\u00e7a de suas caracter\u00edsticas, sem depender de r\u00f3tulos previamente definidos.</p> <p>Ao serem aplicados em conjunto, esses algoritmos permitem duas perspectivas complementares: de um lado, a predi\u00e7\u00e3o direta de categorias por meio do KNN; de outro, a descoberta de padr\u00f5es ocultos com o K-Means. Essa combina\u00e7\u00e3o ajuda tanto a entender melhor a estrutura dos dados quanto a explorar possibilidades de segmenta\u00e7\u00e3o e an\u00e1lise de comportamento.</p> <p>Cars Purchase Decision</p> <p>Este projeto tem como objetivo aplicar t\u00e9cnicas de Machine Learning para compreender os fatores que influenciam a decis\u00e3o de compra de autom\u00f3veis. A partir de um conjunto de dados com informa\u00e7\u00f5es sobre idade, g\u00eanero e sal\u00e1rio anual dos clientes, foi constru\u00edda uma \u00e1rvore de decis\u00e3o capaz de classificar se um indiv\u00edduo provavelmente realizar\u00e1 a compra ou n\u00e3o.</p>"},{"location":"metricas/main/#exploracao-dos-dados","title":"Explora\u00e7\u00e3o dos Dados","text":"<p>Estat\u00edsticas Descritivas</p> <p>Para o projeto foi utilizado o dataset Cars - Purchase Decision Dataset e cont\u00e9m detalhes de clientes que consideraram comprar um autom\u00f3vel, juntamente com seus sal\u00e1rios.</p> <p>O conjunto de dados cont\u00e9m 1000 registros e 5 vari\u00e1veis. A vari\u00e1vel alvo \u00e9 Purchased (0 = n\u00e3o comprou, 1 = comprou). Entre as vari\u00e1veis explicativas, temos Gender (categ\u00f3rica), Age (num\u00e9rica) e AnnualSalary (num\u00e9rica).</p> <p>Vari\u00e1veis</p> <ul> <li> <p>User ID: C\u00f3digo do Cliente</p> </li> <li> <p>Gender: G\u00eanero do Cliente</p> </li> <li> <p>Age: Idade do Cliente em anos</p> </li> <li> <p>AnnualSalary: Sal\u00e1rio anual do Cliente</p> </li> <li> <p>Purchased: Se o cliente realizou a compra</p> </li> </ul> <p>Estat\u00edsticas Descritivas e Visualiza\u00e7\u00f5es</p> <p>O gr\u00e1fico mostra a rela\u00e7\u00e3o entre idade e sal\u00e1rio dos clientes, destacando quem realizou a compra e quem n\u00e3o comprou:</p> ResultCode 2025-09-23T13:40:14.052976 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- ETAPA 2: Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- ETAPA 3: Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n\ndf0 = df[df[\"Purchased\"] == 0]\ndf1 = df[df[\"Purchased\"] == 1]\n\n# --- PLOT: Dispers\u00e3o Idade x Sal\u00e1rio ---\nfig, ax = plt.subplots(1, 1, figsize=(7, 5))\n\nax.scatter(\n    df0[\"Age\"], df0[\"AnnualSalary\"],\n    label=\"N\u00e3o comprou (0)\", alpha=0.4,\n    color=\"lightcoral\", edgecolor=\"darkred\", linewidth=0.8\n)\nax.scatter(\n    df1[\"Age\"], df1[\"AnnualSalary\"],\n    label=\"Comprou (1)\", alpha=0.4,\n    color=\"skyblue\", edgecolor=\"navy\", linewidth=0.8\n)\n\nax.set_title(\"Idade x Sal\u00e1rio por Decis\u00e3o de Compra\")\nax.set_xlabel(\"Idade\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.grid(linestyle=\"--\", alpha=0.6)\nax.legend()\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>A visualiza\u00e7\u00e3o deixa claro que idade e sal\u00e1rio exercem influ\u00eancia relevante no comportamento de compra</p> <p>O pr\u00f3ximo gr\u00e1fico apresenta a distribui\u00e7\u00e3o de clientes por g\u00eanero:</p> ResultCode 2025-09-23T13:40:14.242763 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning \ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n\n\ncounts = df[\"Gender\"].value_counts()\n\n# --- PLOT: Distribui\u00e7\u00e3o por G\u00eanero ---\nfig, ax = plt.subplots(1, 1, figsize=(6, 4))\n\nax.bar(\n    counts.index, counts.values,\n    color=[\"pink\", \"skyblue\"], edgecolor=\"lightcoral\"\n)\n\nax.set_title(\"Distribui\u00e7\u00e3o por G\u00eanero\")\nax.set_xlabel(\"G\u00eanero\")\nax.set_ylabel(\"Quantidade\")\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>Observa-se que h\u00e1 uma leve predomin\u00e2ncia de mulheres no dataset.</p> <p>O \u00faltimo gr\u00e1fico apresenta a distribui\u00e7\u00e3o do sal\u00e1rio anual dos clientes, permitindo visualizar a mediana, a dispers\u00e3o dos valores e a presen\u00e7a de poss\u00edveis extremos:</p> ResultCode 2025-09-23T13:40:14.356807 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- ETAPA 1: Data Cleaning\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- PLOT: Boxplot\nfig, ax = plt.subplots(figsize=(7, 5))\n\nbp = ax.boxplot(df[\"AnnualSalary\"], patch_artist=True, widths=0.5)\n\nfor box in bp[\"boxes\"]:\n    box.set(facecolor=\"skyblue\", edgecolor=\"navy\", linewidth=1.2)\nfor whisker in bp[\"whiskers\"]:\n    whisker.set(color=\"navy\", linewidth=1.2)\nfor cap in bp[\"caps\"]:\n    cap.set(color=\"navy\", linewidth=1.2)\nfor median in bp[\"medians\"]:\n    median.set(color=\"darkred\", linewidth=1.5)\n\nax.set_title(\"Distribui\u00e7\u00e3o do Sal\u00e1rio Anual\")\nax.set_ylabel(\"Sal\u00e1rio Anual\")\nax.set_xticks([])\nax.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n\n\nbuffer = BytesIO()\nplt.savefig(buffer, format=\"svg\", bbox_inches=\"tight\")\nbuffer.seek(0)\nprint(buffer.getvalue().decode(\"utf-8\"))\n</code></pre> <p>Info</p> <p>O gr\u00e1fico evidencia que a maior parte dos sal\u00e1rios est\u00e1 concentrada em uma faixa intermedi\u00e1ria, entre aproximadamente 50 mil e 90 mil, com a mediana em torno de 70 mil.</p>"},{"location":"metricas/main/#pre-processamento","title":"Pr\u00e9-processamento","text":"<p>Pr\u00e9-processamento de dados brutos deve ser a primeira etapa ao lidar com datasets de todos tamanhos.</p> <p>Data Cleaning</p> <p>O processo de data cleaning garante que o conjunto utilizado seja confi\u00e1vel e esteja livre de falhas que possam distorcer os resultados. Consiste em identificar e corrigir problemas como valores ausentes, dados inconsistentes ou informa\u00e7\u00f5es que n\u00e3o fazem sentido. Essa limpeza permite que a base seja mais fiel \u00e0 realidade e forne\u00e7a condi\u00e7\u00f5es adequadas para a constru\u00e7\u00e3o de modelos de Machine Learning.</p> <p>No c\u00f3digo, a limpeza foi feita dessa forma: poss\u00edveis valores vazios em idade, g\u00eanero e sal\u00e1rio foram preenchidos com informa\u00e7\u00f5es representativas, como a mediana ou o valor mais frequente.</p> ResultCode Gender Age AnnualSalary Male 41 73500 Male 55 39000 Female 47 42500 Female 53 90500 Female 41 67500 Female 36 63000 Male 59 135500 Female 46 135500 Male 25 59500 Male 32 77500 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    features = ['Gender', 'Age', 'AnnualSalary']\n    return df[features]\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.sample(n=10).to_markdown(index=False))\n</code></pre> <p>Encoding Categorical Variables</p> <p>O processo de encoding de vari\u00e1veis categ\u00f3ricas transforma informa\u00e7\u00f5es em formato de texto em valores num\u00e9ricos, permitindo que algoritmos de Machine Learning consigam utiliz\u00e1-las em seus c\u00e1lculos.</p> <p>No c\u00f3digo, o encoding foi aplicado \u00e0 vari\u00e1vel g\u00eanero, convertendo as categorias \u201cMale\u201d e \u201cFemale\u201d em valores num\u00e9ricos (1 e 0). Dessa forma, a base de dados mant\u00e9m todas as colunas originais, mas agora com a vari\u00e1vel categ\u00f3rica representada de maneira adequada para ser usada em algoritmos de classifica\u00e7\u00e3o.</p> ResultCode User ID Gender Age AnnualSalary Purchased 176 1 41 73500 0 448 1 59 135500 1 391 1 25 59500 0 623 0 47 42500 1 773 0 46 135500 0 413 0 53 90500 1 793 1 55 39000 1 836 0 36 63000 0 586 0 41 67500 0 651 1 32 77500 0 <pre><code>import pandas as pd\n\ndef preprocess(df):\n    # Limpeza\n    df['Age'].fillna(df['Age'].median(), inplace=True)\n    df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)\n    df['AnnualSalary'].fillna(df['AnnualSalary'].median(), inplace=True)\n\n    # Encoding simples para Gender\n    df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})\n\n\n    return df\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv')\ndf = df.sample(n=10, random_state=42)\ndf = preprocess(df)\n\n\nprint(df.to_markdown(index=False))\n</code></pre> <p>Normaliza\u00e7\u00e3o</p> <p>A normaliza\u00e7\u00e3o \u00e9 o processo de reescalar os valores num\u00e9ricos de forma que fiquem dentro de um intervalo fixo, normalmente entre 0 e 1. Isso facilita a compara\u00e7\u00e3o entre vari\u00e1veis que possuem unidades ou magnitudes diferentes, evitando que atributos com valores muito altos dominem a an\u00e1lise.</p> <p>No c\u00f3digo, a normaliza\u00e7\u00e3o foi aplicada \u00e0s colunas idade e sal\u00e1rio anual, transformando seus valores para a faixa de 0 a 1 por meio do m\u00e9todo Min-Max Scaling. Dessa forma, ambas as vari\u00e1veis passam a estar na mesma escala, tornando o conjunto de dados mais consistente e adequado para a modelagem.</p> ResultCode User ID Gender Age AnnualSalary Purchased 290 Male 0.355556 0.705455 1 745 Male 0.333333 0.203636 0 479 Female 0.377778 0.596364 1 574 Female 0.888889 0.141818 1 641 Male 0.377778 0.738182 0 442 Male 0.244444 0.436364 0 527 Male 0.511111 0.523636 1 506 Female 0.222222 0.16 0 951 Female 0.777778 0.647273 1 35 Female 0.533333 0.276364 0 <pre><code>import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# Selecionar colunas num\u00e9ricas para normalizar\nfeatures_to_normalize = ['Age', 'AnnualSalary']\n\n# Inicializar o scaler\nscaler = MinMaxScaler()\n\n# Aplicar normaliza\u00e7\u00e3o e substituir no DataFrame\ndf[features_to_normalize] = scaler.fit_transform(df[features_to_normalize])\n\n# Mostrar amostra dos dados normalizados\nprint(df.sample(10).to_markdown(index=False))\n</code></pre>"},{"location":"metricas/main/#divisao-dos-dados","title":"Divis\u00e3o dos Dados","text":"<p>Ap\u00f3s o pr\u00e9-processamento, o conjunto de dados precisa ser separado em duas partes: uma para treinamento e outra para teste. Essa divis\u00e3o \u00e9 fundamental para que o modelo de Machine Learning aprenda padr\u00f5es a partir de um grupo de exemplos e, depois, seja avaliado em dados que ainda n\u00e3o foram vistos. Dessa forma, \u00e9 poss\u00edvel medir a capacidade de generaliza\u00e7\u00e3o do modelo e evitar que ele apenas memorize os exemplos fornecidos.</p> <p>No c\u00f3digo, os atributos escolhidos como preditores foram g\u00eanero, idade e sal\u00e1rio anual, enquanto a vari\u00e1vel-alvo foi Purchased, que indica se o cliente comprou ou n\u00e3o o produto. A divis\u00e3o foi feita em 70% para treino e 30% para teste, garantindo que a propor\u00e7\u00e3o de clientes que compraram e n\u00e3o compraram fosse preservada em ambos os subconjuntos.</p> ResultCode <p>Tamanho treino: 700 Tamanho teste: 300</p> <pre><code>import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Carregar dataset\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n# --- Data Cleaning\ndf[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\ndf[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\ndf[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n# --- Encoding\ndf[\"Gender\"] = df[\"Gender\"].map({\"Male\": 1, \"Female\": 0})\n\n# --- Normaliza\u00e7\u00e3o\nfor col in [\"Age\", \"AnnualSalary\"]:\n    cmin, cmax = df[col].min(), df[col].max()\n    df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n\n# --- Separar vari\u00e1veis preditoras \nX = df[[\"Gender\", \"Age\", \"AnnualSalary\"]]\ny = df[\"Purchased\"]\n\n# --- Divis\u00e3o em treino e teste \nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\nprint(\"Tamanho treino:\", X_train.shape[0])\nprint(\"Tamanho teste:\", X_test.shape[0])\n</code></pre>"},{"location":"metricas/main/#implementacao-knn","title":"Implementa\u00e7\u00e3o KNN","text":""},{"location":"metricas/main/#usando-scikit-learn","title":"Usando Scikit-Learn","text":"<p>A aplica\u00e7\u00e3o do KNN resultou em uma boa performance na tarefa de classifica\u00e7\u00e3o, com acur\u00e1cia pr\u00f3xima de 91%. O modelo conseguiu diferenciar de forma consistente as classes 0 (n\u00e3o comprou) e 1 (comprou), mostrando que a proximidade entre idade, g\u00eanero e sal\u00e1rio anual \u00e9 suficiente para prever o comportamento de compra. A matriz de confus\u00e3o evidenciou poucos erros, refor\u00e7ando a capacidade do algoritmo em generalizar padr\u00f5es do conjunto de dados.</p> ResultCode <p>Accuracy: 0.91</p> <p>Confusion Matrix: |        |   Pred 0 |   Pred 1 | |:-------|---------:|---------:| | True 0 |      164 |       15 | | True 1 |       11 |      110 |</p> <pre><code>import numpy as np\nimport pandas as pd\nfrom io import BytesIO\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n\ndef preprocess(df):\n\n    df[\"Age\"].fillna(df[\"Age\"].median(), inplace=True)\n    df[\"Gender\"].fillna(df[\"Gender\"].mode()[0], inplace=True)\n    df[\"AnnualSalary\"].fillna(df[\"AnnualSalary\"].median(), inplace=True)\n\n    enc = LabelEncoder()\n    df[\"Gender\"] = enc.fit_transform(df[\"Gender\"]) \n\n    for col in [\"Age\", \"AnnualSalary\"]:\n        cmin, cmax = df[col].min(), df[col].max()\n        df[col] = 0.0 if cmax == cmin else (df[col] - cmin) / (cmax - cmin)\n    # X / y\n    X = df[[\"Gender\", \"Age\", \"AnnualSalary\"]].to_numpy(float)\n    y = df[\"Purchased\"].to_numpy(int)\n    return X, y\n\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\")\nX, y = preprocess(df)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.30, random_state=42, stratify=y\n)\n\n\nknn = KNeighborsClassifier(n_neighbors=5) \nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\n\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\ncm = confusion_matrix(y_test, y_pred)\nprint(\"\\nConfusion Matrix:\")\nprint(pd.DataFrame(cm, index=[\"True 0\",\"True 1\"], columns=[\"Pred 0\",\"Pred 1\"]).to_markdown())\n</code></pre>"},{"location":"metricas/main/#implementacao-k-means","title":"Implementa\u00e7\u00e3o K-Means","text":"<p>A an\u00e1lise com o algoritmo K-Means permitiu identificar dois grupos principais no conjunto de dados, definidos a partir da combina\u00e7\u00e3o entre idade e sal\u00e1rio anual. Cada cor no gr\u00e1fico representa um cluster, enquanto as estrelas vermelhas marcam os centr\u00f3ides, ou seja, os pontos m\u00e9dios que caracterizam cada grupo. Essa separa\u00e7\u00e3o evidencia padr\u00f5es de comportamento entre os indiv\u00edduos, como faixas salariais e idades que tendem a se agrupar. Apesar de n\u00e3o utilizar os r\u00f3tulos originais (como no KNN), o K-Means oferece uma vis\u00e3o explorat\u00f3ria \u00fatil para identificar tend\u00eancias e estruturas ocultas nos dados.</p> Gr\u00e1ficoCode 2025-09-23T13:40:14.635597 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <pre><code>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import StringIO\nfrom sklearn.cluster import KMeans\n\nplt.figure(figsize=(12, 10))\n\n\nurl = \"https://raw.githubusercontent.com/EnzoMalagoli/machine-learning/refs/heads/main/data/car_data.csv\"\ndf = pd.read_csv(url)\n\n\nX = df[[\"Age\", \"AnnualSalary\"]].dropna().to_numpy()\n\n\nkmeans = KMeans(n_clusters=2, init=\"k-means++\", max_iter=100, random_state=42, n_init=10)\nlabels = kmeans.fit_predict(X)\n\n\nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap=\"viridis\", s=50, alpha=0.7)\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],\n            c=\"red\", marker=\"*\", s=200, label=\"Centroides\")\n\nplt.title(\"Clusters com K-Means\")\nplt.xlabel(\"Idade\")\nplt.ylabel(\"Sal\u00e1rio Anual\")\nplt.legend()\n\n\nbuffer = StringIO()\nplt.savefig(buffer, format=\"svg\", transparent=True)\nprint(buffer.getvalue())\n</code></pre> <p>As m\u00e9tricas de avalia\u00e7\u00e3o desempenham um papel essencial na valida\u00e7\u00e3o de modelos de machine learning, pois permitem medir sua performance de forma objetiva. No caso do KNN, foram utilizadas m\u00e9tricas supervisionadas como acur\u00e1cia, matriz de confus\u00e3o, precis\u00e3o, recall e F1-score, que mostraram um desempenho consistente, com acur\u00e1cia em torno de 91% e boa distin\u00e7\u00e3o entre as classes 0 (n\u00e3o comprou) e 1 (comprou). </p> <p>J\u00e1 no K-Means, por ser um algoritmo n\u00e3o supervisionado, a an\u00e1lise foi realizada a partir da coer\u00eancia entre os clusters formados e a vari\u00e1vel real de compra, o que evidenciou padr\u00f5es relevantes no comportamento dos dados. Assim, observa-se que a escolha de m\u00e9tricas adequadas, supervisionadas para classifica\u00e7\u00e3o e comparativas para clustering, \u00e9 indispens\u00e1vel para interpretar corretamente os resultados obtidos.</p>"},{"location":"roteiro2/main/","title":"Main","text":""},{"location":"roteiro2/main/#diagrama-de-classes-do-banco","title":"Diagrama de Classes do Banco","text":"<pre><code>classDiagram\n    class Conta {\n        - String id\n        # double saldo\n        - Cliente cliente\n        + sacar(double valor)\n        + depositar(double valor)\n    }\n    class Cliente {\n        - String id\n        - String nome\n        - List&lt;Conta&gt; contas\n    }\n    class PessoaFisica {\n        - String cpf\n    }\n    class PessoaJuridica {\n        - String cnpj\n    }\n    class ContaCorrente {\n        - double limite\n        + sacar(double valor)\n    }\n    class ContaPoupanca {\n        + sacar(double valor)\n    }\n    Conta *-- Cliente\n    Conta &lt;|-- ContaCorrente\n    Conta &lt;|-- ContaPoupanca\n    Cliente &lt;|-- PessoaFisica\n    Cliente &lt;|-- PessoaJuridica</code></pre>"},{"location":"roteiro2/main/#diagrama-de-sequencia-de-autorizacao","title":"Diagrama de Seq\u00fc\u00eancia de Autoriza\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre>"},{"location":"roteiro3/main/","title":"Main","text":"<p>Running the code below in Browser (Woooooowwwwww!!!!!!). <sup>1</sup></p> <p> </p> Editor (session: default) Run <pre>import ssl\nimport pandas as pd\n\ndf = pd.DataFrame()\ndf['AAPL'] = pd.Series([1, 2, 3])\ndf['MSFT'] = pd.Series([4, 5, 6])\ndf['GOOGL'] = pd.Series([7, 8, 9])\n\nprint(df)\n</pre> Output Clear <pre></pre> <p></p> <ol> <li> <p>Pyodide \u21a9</p> </li> </ol>"},{"location":"roteiro4/main/","title":"Main","text":"<p>Se chegou aqui, \u00e9 porque voc\u00ea est\u00e1 interessado em saber mais. Logo, de brinde, como rodar um c\u00f3digo <code>Python</code> aqui.</p> 2025-09-23T13:40:14.958585 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-09-23T13:40:15.836492 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Markdown-exec \u00e9 uma extens\u00e3o do Markdown que permite executar c\u00f3digo Python diretamente no Markdown. Isso \u00e9 \u00fatil para gerar resultados din\u00e2micos ou executar scripts de forma interativa.</p>"}]}